# -*- coding: utf-8 -*-
"""QA(with audio).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0kTxqfpt0Tuvu5j2eJmIdtk4GhhMtVY
"""

# -*- coding: utf-8 -*-
"""mbart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rK3WQSR1Mh7m3bAJJln9enlDbbWoSH4T
"""

!pip install -q transformers datasets torchaudio sentencepiece
!pip install -q git+https://github.com/openai/whisper.git

!pip install git+https://github.com/openai/whisper.git
!apt install ffmpeg  # Required for audio processing

from google.colab import files
uploaded = files.upload()

import whisper

model = whisper.load_model("small")  # You can also try "medium" or "large" if needed
result = model.transcribe(list(uploaded.keys())[0], language="ur")  # Urdu language tag
urdu_text = result["text"]

print("üìù Urdu Transcription:", urdu_text)

from transformers import MBartForConditionalGeneration, MBart50TokenizerFast

model_name = "facebook/mbart-large-50-many-to-many-mmt"
tokenizer = MBart50TokenizerFast.from_pretrained(model_name)
translator = MBartForConditionalGeneration.from_pretrained(model_name)

# Set languages
tokenizer.src_lang = "ur_PK"
encoded_input = tokenizer(urdu_text, return_tensors="pt")

# Translate to English
generated_tokens = translator.generate(
    **encoded_input,
    forced_bos_token_id=tokenizer.lang_code_to_id["en_XX"]
)

translated_eng = tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)[0]
print("üåê English Translation:", translated_eng)

!pip install transformers

from transformers import pipeline

qa_pipeline = pipeline("question-answering", model="distilbert-base-cased-distilled-squad")

# Use your translated English text from Urdu audio
context = """
khansa a dirty kid.
"""  # Replace with your actual translated text

question = "what type of girl she is?"

# Get the answer from QA pipeline
result = qa_pipeline(question=question, context=context)

print(" Question:", question)
print(" Answer:", result["answer"])

question = "Name of girl  who is dirty?"

# Get the answer from QA pipeline
result = qa_pipeline(question=question, context=context)

print(" Question:", question)
print(" Answer:", result["answer"])

question = "Is dirty kid a girl or boy?"

# Get the answer from QA pipeline
result = qa_pipeline(question=question, context=context)

print(" Question:", question)
print(" Answer:", result["answer"])